%% file : SFunctionIMPDriverNavigationDecode.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionIMPDriverNavigationDecode
%% 
%% Simulink version      : 10.6 (R2022b) 13-May-2022
%% TLC file generated on : 27-Oct-2022 13:38:18

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionIMPDriverNavigationDecode';
     def.OutputFcnSpec = 'void IMP_OutputDriverNavigationDecode(uint8 u1[], uint32 u2, int32 y1[1], double y2[1], uint8 y3[11], uint8 y4[13], double y5[32])';
     def.StartFcnSpec = 'void IMP_CreateDriverNavigationDecode()';
     def.TerminateFcnSpec = 'void IMP_DeleteDriverNavigationDecode()';
     def.HeaderFiles = {'IMP_DriverNavigationDecode.h'};
     def.SourceFiles = {'IMP_DriverNavigationDecode.cpp', 'InterModuleProtocol.cpp', 'IMPConvexPolygon.cpp', 'IMPState.cpp', 'IMPStateConfiguration.cpp'};
     def.IncPaths = {'../../source/InterModuleProtocol'};
     def.SrcPaths = {'../../source/InterModuleProtocol'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionIMPDriverNavigationDecode "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionIMPDriverNavigationDecode_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        

        extern void SFunctionIMPDriverNavigationDecode_wrapper_Start(void);
        extern void SFunctionIMPDriverNavigationDecode_wrapper_Output(const uint8_T* u1, const uint32_T u2,  int32_T* y1,  real_T* y2,  uint8_T* y3,  uint8_T* y4,  real_T* y5);
        extern void SFunctionIMPDriverNavigationDecode_wrapper_Terminate(void);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionIMPDriverNavigationDecode_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "IMP_DriverNavigationDecode.h"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionIMPDriverNavigationDecode_wrapper_Start(void) {
            IMP_CreateDriverNavigationDecode();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionIMPDriverNavigationDecode_wrapper_Output(const uint8_T* u1, const uint32_T u2,  int32_T* y1,  real_T* y2,  uint8_T* y3,  uint8_T* y4,  real_T* y5) {
            IMP_OutputDriverNavigationDecode((uint8_T*)(u1), (uint32_T)(u2), y1, y2, y3, y4, y5);
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionIMPDriverNavigationDecode_wrapper_Terminate(void) {
            IMP_DeleteDriverNavigationDecode();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("IMP_DriverNavigationDecode.h")>
    %endif
    %<SLibAddToStaticSources("IMP_DriverNavigationDecode.cpp")>
    %<SLibAddToStaticSources("InterModuleProtocol.cpp")>
    %<SLibAddToStaticSources("IMPConvexPolygon.cpp")>
    %<SLibAddToStaticSources("IMPState.cpp")>
    %<SLibAddToStaticSources("IMPStateConfiguration.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        SFunctionIMPDriverNavigationDecode_wrapper_Start();
    %else
        %% 
        IMP_CreateDriverNavigationDecode();
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        SFunctionIMPDriverNavigationDecode_wrapper_Output(%<u1_ptr>, %<u2_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>);
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %% 
        IMP_OutputDriverNavigationDecode((uint8_T*)%<u1_ptr>, %<u2_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        SFunctionIMPDriverNavigationDecode_wrapper_Terminate();
    %else
        %% 
        IMP_DeleteDriverNavigationDecode();
    %endif
%endfunction

%% [EOF]
