%% file : SFunctionIMPDriverConvexPolygonDecode.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionIMPDriverConvexPolygonDecode
%% 
%% Simulink version      : 10.6 (R2022b) 13-May-2022
%% TLC file generated on : 27-Oct-2022 13:38:18

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionIMPDriverConvexPolygonDecode';
     def.OutputFcnSpec = 'void IMP_OutputDriverConvexPolygonDecode(uint8 u1[], uint32 u2, int32 y1[1], double y2[1], uint8 y3[1], uint8 y4[1], double y5[3], double y6[2*255*p1], uint16 p1, uint8 y7[p1], uint16 y8[p1], uint8 y9[p1], double y10[p1], double y11[p1], double y12[p1], uint16 y13[1])';
     def.StartFcnSpec = 'void IMP_CreateDriverConvexPolygonDecode()';
     def.TerminateFcnSpec = 'void IMP_DeleteDriverConvexPolygonDecode()';
     def.HeaderFiles = {'IMP_DriverConvexPolygonDecode.h'};
     def.SourceFiles = {'IMP_DriverConvexPolygonDecode.cpp', 'InterModuleProtocol.cpp', 'IMPConvexPolygon.cpp', 'IMPState.cpp', 'IMPStateConfiguration.cpp'};
     def.IncPaths = {'../../source/InterModuleProtocol'};
     def.SrcPaths = {'../../source/InterModuleProtocol'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionIMPDriverConvexPolygonDecode "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionIMPDriverConvexPolygonDecode_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        

        extern void SFunctionIMPDriverConvexPolygonDecode_wrapper_Start(void);
        extern void SFunctionIMPDriverConvexPolygonDecode_wrapper_Output(const uint8_T* u1, const uint32_T u2,  int32_T* y1,  real_T* y2,  uint8_T* y3,  uint8_T* y4,  real_T* y5,  real_T* y6, const uint16_T p1,  uint8_T* y7,  uint16_T* y8,  uint8_T* y9,  real_T* y10,  real_T* y11,  real_T* y12,  uint16_T* y13);
        extern void SFunctionIMPDriverConvexPolygonDecode_wrapper_Terminate(void);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionIMPDriverConvexPolygonDecode_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "IMP_DriverConvexPolygonDecode.h"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionIMPDriverConvexPolygonDecode_wrapper_Start(void) {
            IMP_CreateDriverConvexPolygonDecode();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionIMPDriverConvexPolygonDecode_wrapper_Output(const uint8_T* u1, const uint32_T u2,  int32_T* y1,  real_T* y2,  uint8_T* y3,  uint8_T* y4,  real_T* y5,  real_T* y6, const uint16_T p1,  uint8_T* y7,  uint16_T* y8,  uint8_T* y9,  real_T* y10,  real_T* y11,  real_T* y12,  uint16_T* y13) {
            IMP_OutputDriverConvexPolygonDecode((uint8_T*)(u1), (uint32_T)(u2), y1, y2, y3, y4, y5, y6, (uint16_T)(p1), y7, y8, y9, y10, y11, y12, y13);
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionIMPDriverConvexPolygonDecode_wrapper_Terminate(void) {
            IMP_DeleteDriverConvexPolygonDecode();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("IMP_DriverConvexPolygonDecode.h")>
    %endif
    %<SLibAddToStaticSources("IMP_DriverConvexPolygonDecode.cpp")>
    %<SLibAddToStaticSources("InterModuleProtocol.cpp")>
    %<SLibAddToStaticSources("IMPConvexPolygon.cpp")>
    %<SLibAddToStaticSources("IMPState.cpp")>
    %<SLibAddToStaticSources("IMPStateConfiguration.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        SFunctionIMPDriverConvexPolygonDecode_wrapper_Start();
    %else
        %% 
        IMP_CreateDriverConvexPolygonDecode();
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign y10_ptr = LibBlockOutputSignalAddr(9, "", "", 0)
        %assign y11_ptr = LibBlockOutputSignalAddr(10, "", "", 0)
        %assign y12_ptr = LibBlockOutputSignalAddr(11, "", "", 0)
        %assign y13_ptr = LibBlockOutputSignalAddr(12, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        SFunctionIMPDriverConvexPolygonDecode_wrapper_Output(%<u1_ptr>, %<u2_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<p1_val>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>, %<y10_ptr>, %<y11_ptr>, %<y12_ptr>, %<y13_ptr>);
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign y10_ptr = LibBlockOutputSignalAddr(9, "", "", 0)
        %assign y11_ptr = LibBlockOutputSignalAddr(10, "", "", 0)
        %assign y12_ptr = LibBlockOutputSignalAddr(11, "", "", 0)
        %assign y13_ptr = LibBlockOutputSignalAddr(12, "", "", 0)
        %% 
        IMP_OutputDriverConvexPolygonDecode((uint8_T*)%<u1_ptr>, %<u2_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<p1_val>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>, %<y10_ptr>, %<y11_ptr>, %<y12_ptr>, %<y13_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        SFunctionIMPDriverConvexPolygonDecode_wrapper_Terminate();
    %else
        %% 
        IMP_DeleteDriverConvexPolygonDecode();
    %endif
%endfunction

%% [EOF]
