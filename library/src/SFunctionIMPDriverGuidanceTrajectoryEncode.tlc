%% file : SFunctionIMPDriverGuidanceTrajectoryEncode.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionIMPDriverGuidanceTrajectoryEncode
%% 
%% Simulink version      : 23.2 (R2023b) 01-Aug-2023
%% TLC file generated on : 20-May-2024 12:11:15

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionIMPDriverGuidanceTrajectoryEncode';
     def.OutputFcnSpec = 'void IMP_OutputDriverGuidanceTrajectoryEncode(uint8 y1[p1], uint32 y2[1], uint32 p1, double u1, int32 u2, int32 u3, int32 u4, double u5, double u6, uint8 u7[11], uint8 u8[13], double u9[32*p2], uint32 p2, uint32 u10)';
     def.StartFcnSpec = 'void IMP_CreateDriverGuidanceTrajectoryEncode()';
     def.TerminateFcnSpec = 'void IMP_DeleteDriverGuidanceTrajectoryEncode()';
     def.HeaderFiles = {'IMP_DriverGuidanceTrajectoryEncode.h'};
     def.SourceFiles = {'IMP_DriverGuidanceTrajectoryEncode.cpp', 'InterModuleProtocol.cpp', 'IMPConvexPolygon.cpp', 'IMPState.cpp', 'IMPStateConfiguration.cpp'};
     def.IncPaths = {'../../source/InterModuleProtocol'};
     def.SrcPaths = {'../../source/InterModuleProtocol'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionIMPDriverGuidanceTrajectoryEncode "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "IMP_DriverGuidanceTrajectoryEncode.h"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("IMP_DriverGuidanceTrajectoryEncode.h")>
    %endif
    %<SLibAddToStaticSources("IMP_DriverGuidanceTrajectoryEncode.cpp")>
    %<SLibAddToStaticSources("InterModuleProtocol.cpp")>
    %<SLibAddToStaticSources("IMPConvexPolygon.cpp")>
    %<SLibAddToStaticSources("IMPState.cpp")>
    %<SLibAddToStaticSources("IMPStateConfiguration.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign int32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT32)
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_Start_%<sfunInstanceName>(void);
        extern void SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_Output_%<sfunInstanceName>( %<uint8Type>* y1,  %<uint32Type>* y2, const %<uint32Type> p1, const %<doubleType> u1, const %<int32Type> u2, const %<int32Type> u3, const %<int32Type> u4, const %<doubleType> u5, const %<doubleType> u6, const %<uint8Type>* u7, const %<uint8Type>* u8, const %<doubleType>* u9, const %<uint32Type> p2, const %<uint32Type> u10);
        extern void SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_Terminate_%<sfunInstanceName>(void);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "IMP_DriverGuidanceTrajectoryEncode.h"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_Start_%<sfunInstanceName>(void) {
            IMP_CreateDriverGuidanceTrajectoryEncode();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_Output_%<sfunInstanceName>( %<uint8Type>* y1,  %<uint32Type>* y2, const %<uint32Type> p1, const %<doubleType> u1, const %<int32Type> u2, const %<int32Type> u3, const %<int32Type> u4, const %<doubleType> u5, const %<doubleType> u6, const %<uint8Type>* u7, const %<uint8Type>* u8, const %<doubleType>* u9, const %<uint32Type> p2, const %<uint32Type> u10) {
            IMP_OutputDriverGuidanceTrajectoryEncode(y1, y2, (%<uint32Type>)(p1), (%<doubleType>)(u1), (%<int32Type>)(u2), (%<int32Type>)(u3), (%<int32Type>)(u4), (%<doubleType>)(u5), (%<doubleType>)(u6), (%<uint8Type>*)(u7), (%<uint8Type>*)(u8), (%<doubleType>*)(u9), (%<uint32Type>)(p2), (%<uint32Type>)(u10));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_Terminate_%<sfunInstanceName>(void) {
            IMP_DeleteDriverGuidanceTrajectoryEncode();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_Start_%<sfunInstanceName>();
        
        }
    %else
        %% 
        IMP_CreateDriverGuidanceTrajectoryEncode();
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_ptr = LibBlockInputSignalAddr(6, "", "", 0)
        %assign u8_ptr = LibBlockInputSignalAddr(7, "", "", 0)
        %assign u9_ptr = LibBlockInputSignalAddr(8, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_Output_%<sfunInstanceName>(%<y1_ptr>, %<y2_ptr>, %<p1_val>, %<u1_val>, %<u2_val>, %<u3_val>, %<u4_val>, %<u5_val>, %<u6_val>, %<u7_ptr>, %<u8_ptr>, %<u9_ptr>, %<p2_val>, %<u10_val>);
        
        }
    %else
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign u7_ptr = LibBlockInputSignalAddr(6, "", "", 0)
        %assign u8_ptr = LibBlockInputSignalAddr(7, "", "", 0)
        %assign u9_ptr = LibBlockInputSignalAddr(8, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign u10_val = LibBlockInputSignal(9, "", "", 0)
        %% 
        IMP_OutputDriverGuidanceTrajectoryEncode(%<y1_ptr>, %<y2_ptr>, %<p1_val>, %<u1_val>, %<u2_val>, %<u3_val>, %<u4_val>, %<u5_val>, %<u6_val>, (%<uint8Type>*)%<u7_ptr>, (%<uint8Type>*)%<u8_ptr>, (%<doubleType>*)%<u9_ptr>, %<p2_val>, %<u10_val>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionIMPDriverGuidanceTrajectoryEncode_wrapper_Terminate_%<sfunInstanceName>();
        
        }
    %else
        %% 
        IMP_DeleteDriverGuidanceTrajectoryEncode();
    %endif
%endfunction

%% [EOF]
